# -*- mode:Shell-script -*-

lrtd () {
    # list only directories in reverse sorted time order
    \ls --color=always -1Adrt "$@"/*
}

toff () {
# touchpad off
xinput set-prop 'SynPS/2 Synaptics TouchPad' 'Device Enabled' 0
printf 'touchpad off\n'
}

ton () {
# touchpad on
xinput set-prop 'SynPS/2 Synaptics TouchPad' 'Device Enabled' 1
printf 'touchpad on\n'
}

f () {
shopt -s nocaseglob
set -x
\ls --color=always -d *$@*
set +x
}

# count number of files
nf () {
    ls -1 "$@" | wc -l
}

sprunge () {
    echo "$@" | curl -F 'sprunge=<-' http://sprunge.us
}

ss () {
    pacman --color=always -Ss "$@" | less -Er
}

q () {
    for e in "$@"; do
        printf "$e\n"
        #pacman --color=always -Qs "$e" # why 's' takes more time
        pacman --color=always -Q "$e"
        printf '\n'
    done
}

ql () {
    pacman --color=always -Qlq "$@" | less -Er
}


e () {
    if [[ $# -eq 0 ]]; then
        emacsclient -a="" -nc &
    else
        emacsclient -a=" " -n "$@" &
    fi
}


mkcd() { mkdir -p "$@" && cd "$_"; }

man() {
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}


proxy() {
    echo -n "password:"
    read -es pass
    export all_proxy="http://$1:$pass@$2"
}

sanitize() {
    local x="$1"
    x="${x//[^[:alnum:]]/ }"
    x="${x##+([[:space:]])}"    # trim leading whitespace
    x="${x%%+([[:space:]])}"    # trim trailing whitespace
    x="${x//+([[:space:]])/_}"  # space(s) to underscore
    x="${x,,}"  # lower case
    echo "$x"
}


fix() {
    # http://mywiki.wooledge.org/BashSheet#Parameter_Operations
    # http://mywiki.wooledge.org/BashFAQ/030
    # extglob is needed

    # problems
    # filename is file.tar.gz
    # c++ in the filename

    echo "old :: $1"

    # extension
    # if no extension is found then ${1##*.} expands so "$1" Refer http://mywiki.wooledge.org/BashFAQ/073
    local fix_ext="${1##*.}"
    fix_ext="$(sanitize "$fix_ext")"

    # filename
    local fix_fn="${1%.*}"
    fix_fn="$(sanitize "$fix_fn")";

    if [[ $fix_fn == $fix_ext ]];
    then
        # no extension
        local fix_newname="$fix_fn"
    else
        # has extension
        fix_newname="$fix_fn.$fix_ext"
    fi

    echo "new :: $fix_newname"

    read -p 'change name (y/n)? '
    if [[ $REPLY == y ]];
    then
        mv -iv "$1" "$fix_newname"
    fi
}

# find files
ff()
{
    #set -x
    local p
    local a
    for p in "${@:2}"; do a+=( -iname "*$p*" ); done
    find "$1" "${a[@]}"
    #set +x
}

# http://phraktured.net/config/.bashrc
function findf() { find . -type f -iname '*'$*'*' -ls; }


today () { \date +%Y_%m_%d; }
now () { \date +%H_%M_%S; }
datetime () { \date +%Y_%m_%d_%H_%M_%S; }

backnew() {
    backnew_filename=$(basename $@)
    #echo $backnew_filename_$(today)
    if [[ -f $@ ]]; then
        cp -piv $@ /home/m/pacnew/"$backnew_filename"_$(today)
    else
        echo "not found"
    fi

    if [[ -f $@.pacnew ]]; then
        cp -piv $@.pacnew /home/m/pacnew/"$backnew_filename".pacnew_$(today)
    else
        echo ".pacnew not found"
    fi
}

y () {
    #set -x
    youtube-dl --title --no-mtime --no-overwrites \
	--write-sub --sub-lang 'en' \
        --restrict-filenames --continue --format 18 "$@" ;
    #set +x
}

yb () {
    #set -x
    youtube-dl --title --no-mtime --no-overwrites \
	--write-sub --sub-lang 'en' \
        --restrict-filenames --continue --format 'best' "$@" ;
    #set +x
}


findsort () {
    #set -x
    # %Tk File's last modification time in the format specified by k, which is the same as for %A
    # k == @
    # %p file's name
    #find . -iname "$1" -printf '%T@ \t %p\n'
    find -type f -name $1 -printf '%T@\t%t\t%p\n' | sort -n | awk -F'\t' '{print $2, $3}'
    #set +x
}


# thanks to prince_jammys on #bash
show() { declare -p "${1^^}"; }


hado () {
    ssh -i ~/vzper-east.pem hduser@hadoop
}

cube () {
    ssh -i ~/vzper-east.pem ec2-user@cube
}

starthadoop() {
    ~/.local/bin/aws ec2 start-instances --instance-ids i-12406abb i-a4557f0d i-93547e3a
}

stophadoop() {
    ~/.local/bin/aws ec2 stop-instances --instance-ids i-12406abb i-a4557f0d i-93547e3a
}

dihadoop() {
    # describe instances
    ~/.local/bin/aws ec2 describe-instances --instance-ids i-12406abb i-a4557f0d i-93547e3a
}

statushadoop() {
    ~/.local/bin/aws ec2 describe-instances --instance-ids i-12406abb i-a4557f0d i-93547e3a | jq .Reservations[].Instances[].State.Name
}
